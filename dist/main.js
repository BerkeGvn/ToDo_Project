(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function n(n,a){e(2,arguments);var r=t(n),o=t(a),i=r.getTime()-o.getTime();return i<0?-1:i>0?1:i}function a(n,a){e(2,arguments);var r=t(n),o=t(a),i=r.getFullYear()-o.getFullYear(),d=r.getMonth()-o.getMonth();return 12*i+d}function r(n){e(1,arguments);var a=t(n);return a.setHours(23,59,59,999),a}function o(n){e(1,arguments);var a=t(n),r=a.getMonth();return a.setFullYear(a.getFullYear(),r+1,0),a.setHours(23,59,59,999),a}function i(n){e(1,arguments);var a=t(n);return r(a).getTime()===o(a).getTime()}function d(r,o){e(2,arguments);var d,u=t(r),s=t(o),c=n(u,s),l=Math.abs(a(u,s));if(l<1)d=0;else{1===u.getMonth()&&u.getDate()>27&&u.setDate(30),u.setMonth(u.getMonth()-c*l);var m=n(u,s)===-c;i(t(r))&&1===l&&1===n(r,s)&&(m=!1),d=c*(l-Number(m))}return 0===d?0:d}function u(n,a){e(2,arguments);var r=t(n),o=t(a);return r.getTime()-o.getTime()}function s(t,n){e(2,arguments);var a=u(t,n)/1e3;return a>0?Math.floor(a):Math.ceil(a)}var c={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function l(e){return function(t){var n=t||{},a=n.width?String(n.width):e.defaultWidth;return e.formats[a]||e.formats[e.defaultWidth]}}var m,h={date:l({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:l({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:l({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},f={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function g(e){return function(t,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=r.width?String(r.width):o;a=e.formattingValues[i]||e.formattingValues[o]}else{var d=e.defaultWidth,u=r.width?String(r.width):e.defaultWidth;a=e.values[u]||e.values[d]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function p(e){return function(t,n){var a=String(t),r=n||{},o=r.width,i=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],d=a.match(i);if(!d)return null;var u,s=d[0],c=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth];return u="[object Array]"===Object.prototype.toString.call(c)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(c):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(c),u=e.valueCallback?e.valueCallback(u):u,{value:u=r.valueCallback?r.valueCallback(u):u,rest:a.slice(s.length)}}}const b={code:"en-US",formatDistance:function(e,t,n){var a;return n=n||{},a="string"==typeof c[e]?c[e]:1===t?c[e].one:c[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:h,formatRelative:function(e,t,n,a){return f[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:g({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:g({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:g({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:g({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:g({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(m={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),a=t||{},r=n.match(m.matchPattern);if(!r)return null;var o=r[0],i=n.match(m.parsePattern);if(!i)return null;var d=m.valueCallback?m.valueCallback(i[0]):i[0];return{value:d=a.valueCallback?a.valueCallback(d):d,rest:n.slice(o.length)}}),era:p({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:p({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:p({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:p({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:p({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function y(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})t.hasOwnProperty(n)&&(e[n]=t[n]);return e}({},e)}function v(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var w=1440,S=43200;function M(a,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};e(2,arguments);var i=o.locale||b;if(!i.formatDistance)throw new RangeError("locale must contain formatDistance property");var u=n(a,r);if(isNaN(u))throw new RangeError("Invalid time value");var c,l,m=y(o);m.addSuffix=Boolean(o.addSuffix),m.comparison=u,u>0?(c=t(r),l=t(a)):(c=t(a),l=t(r));var h,f=s(l,c),g=(v(l)-v(c))/1e3,p=Math.round((f-g)/60);if(p<2)return o.includeSeconds?f<5?i.formatDistance("lessThanXSeconds",5,m):f<10?i.formatDistance("lessThanXSeconds",10,m):f<20?i.formatDistance("lessThanXSeconds",20,m):f<40?i.formatDistance("halfAMinute",null,m):f<60?i.formatDistance("lessThanXMinutes",1,m):i.formatDistance("xMinutes",1,m):0===p?i.formatDistance("lessThanXMinutes",1,m):i.formatDistance("xMinutes",p,m);if(p<45)return i.formatDistance("xMinutes",p,m);if(p<90)return i.formatDistance("aboutXHours",1,m);if(p<w){var M=Math.round(p/60);return i.formatDistance("aboutXHours",M,m)}if(p<2520)return i.formatDistance("xDays",1,m);if(p<S){var C=Math.round(p/w);return i.formatDistance("xDays",C,m)}if(p<86400)return h=Math.round(p/S),i.formatDistance("aboutXMonths",h,m);if((h=d(l,c))<12){var _=Math.round(p/S);return i.formatDistance("xMonths",_,m)}var k=h%12,D=Math.floor(h/12);return k<3?i.formatDistance("aboutXYears",D,m):k<9?i.formatDistance("overXYears",D,m):i.formatDistance("almostXYears",D+1,m)}let C=[];function _(){let e=document.querySelector(".todolist");document.querySelectorAll(".card").forEach((t=>e.removeChild(t)));for(let e=0;e<C[E.getCurrent()].list.length;e++)x.createCard(C[E.getCurrent()].list[e])}function k(){let e=document.querySelector(".sidebar_projects");document.querySelectorAll("a").forEach((t=>e.removeChild(t)));for(let e=0;e<C.length;e++)T.addProject(C[e])}const D=function(){localStorage.setItem("projectList",JSON.stringify(C))},j=function(){if(localStorage.projectList){let e=localStorage.getItem("projectList");e=JSON.parse(e),C=e,k(),_()}else k(),_()},E=(()=>{let e=0;return{getCurrent:function(){return e},setCurrent:function(t){return e=t}}})();let q=(()=>{let t=document.querySelector(".add_btn-task"),n=document.querySelector(".form_button-cancel"),a=document.querySelector(".form_input-text"),r=document.querySelector(".form_input-textarea"),o=document.querySelector(".form_button-add"),i=document.querySelector(".form_select"),d=document.querySelector(".form_date");return{newTaskBtn:t,formCancelBtn:n,showForm:function(){document.querySelector(".form").style.display="flex"},hideForm:function(){document.querySelector(".form").style.display="none"},addBtn:o,addTodo:function(){let t=a.value,n=r.value,o=i.value,u="";if(P.checkInputText(t,"title"))return;if(""!==d.value){let t=new Date(d.value);u=function(t,n){return e(1,arguments),M(t,Date.now(),n)}(new Date(t),{addSuffix:!0})}a.value="",r.value="";let s=function(e,t,n,a,r){return{title:e,description:t,isDone:!1,priority:a,date:r}}(t,n,0,o,u);C[E.getCurrent()].list.push(s),D(),_(),k(),document.querySelector(".form").style.display="none"}}})(),x={createCard:function(e,t,n){let a=document.createElement("div");a.classList.add("card");let r=document.createElement("p");r.classList.add("card_title"),r.textContent=e.title;let o=document.createElement("p");o.classList.add("card_description"),o.textContent=e.description;let i=document.createElement("div");i.classList.add("card_btns");let d=document.createElement("button");d.className="card_btns_button card_btns_button-delete",d.setAttribute("id",t);let u=document.createElement("button");u.className="card_btns_button card_btns_button-edit";let s=document.createElement("i");s.className="far fa-trash-alt";let c=document.createElement("i");c.className="far fa-edit";let l=document.createElement("p");l.classList.add("card_date"),l.textContent=e.date;let m=document.createElement("div");m.classList.add("card_priority"),P.checkIsDone(a,e),P.chechPriority(m,e.priority),d.appendChild(s),u.appendChild(c),i.appendChild(u),i.appendChild(l),i.appendChild(d),a.appendChild(r),a.appendChild(o),a.appendChild(m),a.appendChild(i),function(e){document.querySelector(".todolist").appendChild(e)}(a),"main"===n?P.allTaskDeleteBtn(d,e,t):P.deleteBtn(d,e),P.doneBtn(u,a,e)}};const P={deleteBtn:function(e,t){e.addEventListener("click",(function(){C[E.getCurrent()].list.splice(C[E.getCurrent()].list.indexOf(t),1),D(),_()}))},allTaskDeleteBtn:function(e,t,n){e.addEventListener("click",(function(){C[n].list.splice(C[n].list.indexOf(t),1),D(),_(),function(){let e=document.querySelector(".todolist");document.querySelectorAll(".card").forEach((t=>e.removeChild(t))),P.createHeader("All Tasks");for(let e=0;e<C.length;e++)C[e].list.forEach((t=>x.createCard(t,e,"main")))}()}))},doneBtn:function(e,t,n){e.addEventListener("click",(function(){t.classList.toggle("done"),n.isDone=!n.isDone,D()}))},checkIsDone:function(e,t){t.isDone&&e.classList.add("done")},chechPriority:function(e,t){switch(t){case"low":e.className+=" low";break;case"med":e.className+=" medium";break;case"high":e.className+=" high";break;default:return}},createHeader:function(e){document.querySelector(".main_h2").innerText=e},checkInputText:function(e,t){return""===e&&(alert(`Please enter a ${t}`),!0)}};let T=(()=>{let e=document.querySelector(".add_btn-project");function t(){let e=document.querySelector(".sidebar_projects_new");e.parentNode.removeChild(e),document.querySelector(".add_btn-project").style.display="flex"}function n(){let e=document.querySelector(".sidebar_projects_new_input").value;if(P.checkInputText(e,"name"))return;let t={name:e,list:[]};C.push(t),D(),k()}return{newProjectBtn:e,newProject:function(){let e=document.querySelector(".sidebar_projects"),a=document.querySelector(".add_btn-project"),r=document.createElement("div");r.className="sidebar_projects_new";let o=document.createElement("input");o.type="text",o.className="sidebar_projects_new_input";let i=document.createElement("div");i.className="sidebar_projects_new_buttons";let d=document.createElement("button");d.textContent="Cancel";let u=document.createElement("button");u.textContent="Add",d.className="sidebar_projects_new_btn sidebar_projects_new_btn-cancel",u.className="sidebar_projects_new_btn sidebar_projects_new_btn-add",a.style.display="none",i.appendChild(d),i.appendChild(u),r.appendChild(o),r.appendChild(i),e.appendChild(r),d.addEventListener("click",t),u.addEventListener("click",n)},addProject:function(t){let n=document.querySelector(".sidebar_projects"),a=document.createElement("a");a.className="sidebar_projects_button",a.tabIndex="0";let r=document.createElement("span"),o=document.createElement("i");var i;o.className="fas fa-times sidebar_projects_button-icon",r.textContent=t.name,a.setAttribute("id",C.indexOf(t)),a.addEventListener("click",(function(){document.querySelector(".add_btn-task").style.display="block";let e=document.querySelector(".todolist");document.querySelectorAll(".card").forEach((t=>e.removeChild(t))),E.setCurrent(Number(a.getAttribute("id"))),P.createHeader(t.name),D(),_()})),a.appendChild(r),a.appendChild(o),n.appendChild(a),i=t,o.addEventListener("click",(function(){C.splice(C.indexOf(i),1),D(),k()})),e.style.display="flex";let d=document.querySelector(".sidebar_projects_new");d&&d.parentNode.removeChild(d)}}})();const W={mainBtn:document.querySelector(".main-button"),tasks:function(){document.querySelector(".add_btn-task").style.display="none";let e=document.querySelector(".todolist");document.querySelectorAll(".card").forEach((t=>e.removeChild(t))),P.createHeader("All Tasks");for(let e=0;e<C.length;e++)C[e].list.forEach((t=>x.createCard(t,e,"main")))}};let N=(()=>{const e=document.querySelector(".hamburger"),t=document.querySelector(".sidebar");return{hamburger:e,mobileMenu:function(){e.classList.toggle("active"),t.classList.toggle("hidden")}}})();q.newTaskBtn.addEventListener("click",q.showForm),q.formCancelBtn.addEventListener("click",q.hideForm),q.addBtn.addEventListener("click",q.addTodo),W.mainBtn.addEventListener("click",W.tasks),T.newProjectBtn.addEventListener("click",T.newProject),N.hamburger.addEventListener("click",N.mobileMenu),document.addEventListener("DOMContentLoaded",W.tasks),j()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,